var canvas=document.getElementById("globe"),RADIUS=10,earthTexture="https://uploads-ssl.webflow.com/651593f136e68a13c8505220/65266c7f9b18f9270c0db268_earth_black_white.jpg",globeFragmentShader="\n    varying float vVisibility;\n    varying vec3 vNormal;\n    varying vec3 vMvPosition;\n    uniform vec3 diffuse;\n    uniform float opacity;\n    #include <common>\n    #include <color_pars_fragment>\n    #include <map_particle_pars_fragment>\n    #include <alphatest_pars_fragment>\n    #include <fog_pars_fragment>\n    #include <logdepthbuf_pars_fragment>\n    #include <clipping_planes_pars_fragment>\n    void main() {\n        #include <clipping_planes_fragment>\n        vec3 outgoingLight = vec3( 0.0 );\n        bool circ = length(gl_PointCoord - 0.5) > 0.5; // make points round\n        bool vis = dot(vMvPosition, vNormal) < 0.; // visible only on the front side of the sphere\n        if (circ || vis) discard;\n        vec3 col = diffuse + (vVisibility > 0.5 ? 0.5 : 0.); // make oceans brighter\n        vec4 diffuseColor = vec4( col, opacity );\n        #include <logdepthbuf_fragment>\n        #include <map_particle_fragment>\n        #include <color_fragment>\n        #include <alphatest_fragment>\n        outgoingLight = diffuseColor.rgb;\n        #include <output_fragment>\n        #include <tonemapping_fragment>\n        #include <encodings_fragment>\n        #include <fog_fragment>\n        #include <premultiplied_alpha_fragment>\n    }",globeVertexShader="\n    uniform sampler2D globeTexture;\n    varying float vVisibility;\n    varying vec3 vNormal;\n    varying vec3 vMvPosition;\n    uniform float size;\n    uniform float scale;\n    #include <common>\n    #include <color_pars_vertex>\n    #include <fog_pars_vertex>\n    #include <morphtarget_pars_vertex>\n    #include <logdepthbuf_pars_vertex>\n    #include <clipping_planes_pars_vertex>\n    #ifdef USE_POINTS_UV\n        varying vec2 vUv;\n        uniform mat3 uvTransform;\n    #endif\n    void main() {\n        #ifdef USE_POINTS_UV\n            vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n        #endif\n        #include <color_vertex>\n        #include <begin_vertex>\n        #include <morphtarget_vertex>\n        #include <project_vertex>\n        \n        vVisibility = texture(globeTexture, uv).g; // get value from texture\n        if (vVisibility >= 0.9) gl_PointSize = size * 0.1;\n        else if (vVisibility < 0.9 && vVisibility > 0.2) gl_PointSize = size * 0.8;\n        else gl_PointSize = size * 0.5;\n        // gl_PointSize = size * (vVisibility < 0.5 ? 0.45 : 0.1); // size depends on the value\n        vNormal = normalMatrix * normalize(position);\n        vMvPosition = -mvPosition.xyz;\n        gl_PointSize *= 0.4 + (dot(normalize(vMvPosition), vNormal) * 0.6); // size depends position in camera space\n        \n        #ifdef USE_SIZEATTENUATION\n            bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n            if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n        #endif\n        #include <logdepthbuf_vertex>\n        #include <clipping_planes_vertex>\n        #include <worldpos_vertex>\n        #include <fog_vertex>\n    }";class Globe{constructor(e,i=1e5){this.canvas=e,this.nrOfPoints=i,this.scene=void 0,this.renderer=void 0,this.camera=void 0,this.controls=void 0,this.globalUniforms={time:{value:0}},this.clock=new THREE.Clock,this.initRenderers(),this.initGlobe(),this.resize()}resize(){this.camera.aspect=document.body.clientWidth/document.body.clientHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(document.body.clientWidth,document.body.clientHeight)}animationLoop(){this.globalUniforms.time.value=this.clock.getElapsedTime(),this.controls.update(),this.renderer.render(this.scene,this.camera)}initRenderers(){this.scene=new THREE.Scene,this.renderer=new THREE.WebGLRenderer({canvas:this.canvas,antialias:!0}),this.renderer.setClearColor(16777215,0),this.renderer.setPixelRatio(window.devicePixelRatio),this.camera=new THREE.PerspectiveCamera(75,document.body.clientWidth/document.body.clientHeight,.1,1e3),this.camera.position.setZ(15),this.camera.position.setX(10),window.addEventListener("resize",this.resize.bind(this)),this.controls=new THREE.OrbitControls(this.camera,this.renderer.domElement),this.controls.enablePan=!1,this.controls.enableZoom=!1,this.controls.enableDamping=!0,this.controls.autoRotate=!0,this.controls.autoRotateSpeed=.5,this.controls.touches.ONE=void 0,this.controls.touches.TWO=THREE.TOUCH.DOLLY_ROTATE,this.renderer.setAnimationLoop(this.animationLoop.bind(this))}initGlobe(){const e=new THREE.Spherical;let i=0;const n=Math.PI*(3-Math.sqrt(5)),t=2/this.nrOfPoints;let o=0,r=1-t/2;const a=[],s=[],l=new THREE.Color,c=[];let d;for(let m=0;m<this.nrOfPoints;m++)i=Math.sqrt(1-r*r),d=new THREE.Vector3(Math.cos(o)*i,r,-Math.sin(o)*i).multiplyScalar(RADIUS),a.push(d),r-=t,o+=n,l.setHSL(.45,.5,.25*Math.random()+.25),l.toArray(s,3*m),e.setFromVector3(d),c.push((e.theta+Math.PI)/(2*Math.PI),1-e.phi/Math.PI);const m=(new THREE.BufferGeometry).setFromPoints(a);m.setAttribute("color",new THREE.Float32BufferAttribute(s,3)),m.setAttribute("uv",new THREE.Float32BufferAttribute(c,2));const p=new THREE.PointsMaterial({size:.1,vertexColors:!0,onBeforeCompile:e=>{e.uniforms.globeTexture={value:(new THREE.TextureLoader).load(earthTexture)},e.vertexShader=globeVertexShader,e.fragmentShader=globeFragmentShader}}),v=new THREE.Points(m,p);this.scene.add(v)}}function checkIsMobile(){let e=!1;var i;return i=navigator.userAgent||navigator.vendor||window.opera,(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(i)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(i.substr(0,4)))&&(e=!0),e}var isMobile=checkIsMobile();isMobile&&(canvas.style.pointerEvents="none");var nrOfPoints=isMobile?1e4:1e5,globe=new Globe(canvas,nrOfPoints);